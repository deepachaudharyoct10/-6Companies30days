class Solution {
public:
int bfs(vector<vector<bool>>&visited ,vector<vector<int>>& grid,int n,int m,queue<pair<pair<int,int>,int>>&q ){
    
    int count =0;
   

    while(!q.empty()){
        auto temp = q.front();
        q.pop();
        int x= temp.first.first;
        int y = temp.first.second;
        int time = temp.second;
        count = max(time,count);

        int dx[4]= {1,0,-1,0};
        int dy[4]= {0,-1,0,1};
        for(int i=0;i<4;i++){
            int newx= x+dx[i];
            int newy= y+dy[i];

            if(newx>=0 && newx<n && newy>=0 && newy<m && !visited[newx][newy] && grid[newx][newy]==1){
                q.push({{newx,newy},time+1});
                visited[newx][newy]= true;
                grid[newx][newy]= 2;
            }
        }
    }

    return count ;
}
    int orangesRotting(vector<vector<int>>& grid) {
        

      
        int n= grid.size();
        int m = grid[0].size();
        vector<vector<bool>>visited(n,vector<bool>(m,false));
        queue<pair<pair<int,int>,int>>q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!visited[i][j] && grid[i][j]==2){
                     q.push({{i,j},0});
                     visited[i][j]= true;
                //  int ans =  bfs(i,j,visited,grid,n,m);
              
                }
            }
        }
        int ans = bfs(visited, grid, n,m,q);
             

        for(int i=0;i<n;i++){
            for(int j= 0;j<m;j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
        }

        return ans;
    }
};
